#Inputs
input DateRangeInput {
	init_date: Date!
	end_date: Date!
}

input MileReportFilterInput{
	doctor_id: ID!
	exchange: Boolean
	created_year: Int
	created_month: Int
	created_at: DateRangeInput
}

input MilesListFilterInput{
	doctor_id: ID!
	formula_id: ID
	exchange: Boolean
	created_at: DateRangeInput

}

#Types
type MileReportType {
	medicalFormulaAmount: Int
	medicalFormulaOrderAmount: Int
	mileAmount: Int
}

type MileType{
    id: ID!
	doctor: DoctorType
	medicalFormula: MedicalFormulaType
	mile: Int!
	exchange: Boolean!
	exchange_date: Date
	createdAt: Date
}

type FormulaMileType{
	doctor: DoctorType
	medicalFormula: MedicalFormulaType
	mileAmount: Int!
}

type MilesList {
	total: Int
	count: Int
	page: Int
	records: [MileType]
}

type FormulaMilesList {
	total: Int
	count: Int
	page: Int
	records: [FormulaMileType]
}

#Queries
type Query {
	#Obtener un registro de MileForSale
	getMile(id:ID!): MileType
	#Obtener una lista de registros de MileForSale
	getMiles(filters:MilesListFilterInput, pagination: PaginationInput): MilesList
	#Obtener un listado de millas agrupado por formula id
	getFormulaMiles(filters:MilesListFilterInput, pagination: PaginationInput): FormulaMilesList
	
	#Obtener un reporte de totales (millas, formulas, ordenes) en un periodo de tiempo
	getMileReport(filters: MileReportFilterInput!): MileReportType
}